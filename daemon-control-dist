#!/usr/bin/env python
# denyhostsmysql     Bring up/down the DenyHostsMySQL daemon
#
# chkconfig: 2345 98 02
# description: Activates/Deactivates the
#    DenyHostsMySQL daemon to block MySQL attempts
#
###############################################

###############################################
#### Edit these to suit your configuration ####
###############################################

DENYHOSTSMYSQL_BIN   = "/usr/sbin/denyhostsmysql"
DENYHOSTSMYSQL_LOCK  = "/run/denyhostsmysql.pid"
DENYHOSTSMYSQL_CFG   = "/etc/denyhostsmysql.conf"

PYTHON_BIN      = "/usr/bin/env python"

###############################################
####         Do not edit below             ####
###############################################

DENYHOSTSMYSQL_BIN = "%s %s" % (PYTHON_BIN, DENYHOSTSMYSQL_BIN)

import os, sys, signal, time

# make sure 'ps' command is accessible (which should be
# in either /usr/bin or /bin.  Modify the PATH so
# popen can find it
env = os.environ.get('PATH', "")
os.environ['PATH'] = "/usr/bin:/bin:%s" % env

STATE_NOT_RUNNING = -1
STATE_LOCK_EXISTS = -2

def usage():
    print "Usage: %s {start [args...] | stop | restart [args...] | status | debug | condrestart [args...] }" % sys.argv[0]
    print
    print "For a list of valid 'args' refer to:"
    print "$ denyhostsmysql.py --help"
    print
    sys.exit(0)


def getpid():
    try:
        fp = open(DENYHOSTSMYSQL_LOCK, "r")
        pid = int(fp.readline().rstrip())
        fp.close()
    except Exception, e:
        return STATE_NOT_RUNNING


    if not sys.platform.startswith('freebsd') and os.access("/proc", os.F_OK):
        # proc filesystem exists, look for pid
        if os.access(os.path.join("/proc", str(pid)), os.F_OK):
            return pid
        else:
            return STATE_LOCK_EXISTS
    else:
        # proc filesystem doesn't exist (or it doesn't contain PIDs), use 'ps'
        p = os.popen("ps -p %d" % pid, "r")
        p.readline() # get the header line
        pid_running = p.readline()
        # pid_running will be '' if no process is found
        if pid_running:
            return pid
        else:
            return STATE_LOCK_EXISTS


def start(*args):
    cmd = "%s --daemon " % DENYHOSTSMYSQL_BIN
    if args: cmd += ' '.join(args)

    print "starting DenyHostsMySQL:   ", cmd

    os.system(cmd)


def stop():
    pid = getpid()
    if pid >= 0:
        os.kill(pid, signal.SIGTERM)
        print "sent DenyHostsMySQL SIGTERM"
    else:
        print "DenyHostsMySQL is not running"

def debug():
    pid = getpid()
    if pid >= 0:
        os.kill(pid, signal.SIGUSR1)
        print "sent DenyHostsMySQL SIGUSR1"
    else:
        print "DenyHostsMySQL is not running"

def status():
    pid = getpid()
    if pid == STATE_LOCK_EXISTS:
        print "%s exists but DenyHostsMySQL is not running" % DENYHOSTSMYSQL_LOCK
    elif pid == STATE_NOT_RUNNING:
        print "DenyhostsMySQL is not running"
    else:
        print "DenyHostsMySQL is running with pid = %d" % pid


def condrestart(*args):
    pid = getpid()
    if pid >= 0:
        restart(*args)


def restart(*args):
    stop()
    time.sleep(1)
    start(*args)


if __name__ == '__main__':
    cases = {'start':       start,
             'stop':        stop,
             'debug':       debug,
             'status':      status,
             'condrestart': condrestart,
             'restart':     restart}

    try:
        args = sys.argv[2:]
    except Exception:
        args = []

    try:
        # arg 1 should contain one of the cases above
        option = sys.argv[1]
    except Exception:
        # try to infer context (from an /etc/init.d/ script, perhaps)
        procname = os.path.basename(sys.argv[0])
        infer_dict = {'K': 'stop',
                      'S': 'start'}
        option = infer_dict.get(procname[0])
        if not option:
            usage()

    try:
        if option in ('start', 'restart', 'condrestart'):
            anystartswith = lambda prefix, xs: any(map(lambda x: x.startswith(prefix), xs))
            if not anystartswith('--config', args) and '-c' not in args:
                args.append("--config=%s" % DENYHOSTSMYSQL_CFG)

        cmd = cases[option]
        apply(cmd, args)
    except Exception:
        usage()



